**scheduling algos**

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
    int start_time;
    int finish_time;
    int waiting_time;
    int turnaround_time;
} Process;

void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

void sort_by_arrival(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void fcfs(Process processes[], int n) {
    sort_by_arrival(processes, n);
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }
        processes[i].start_time = current_time;
        processes[i].finish_time = current_time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].finish_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
        current_time = processes[i].finish_time;
    }
}

void sjf(Process processes[], int n) {
    sort_by_arrival(processes, n);
    int current_time = 0;
    int completed = 0;
    int visited[n];
    for (int i = 0; i < n; i++) visited[i] = 0;

    while (completed != n) {
        int idx = -1;
        int min_bt = 1000000;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && !visited[i]) {
                if (processes[i].burst_time < min_bt) {
                    min_bt = processes[i].burst_time;
                    idx = i;
                }
            }
        }
        if (idx != -1) {
            processes[idx].start_time = current_time;
            processes[idx].finish_time = current_time + processes[idx].burst_time;
            processes[idx].turnaround_time = processes[idx].finish_time - processes[idx].arrival_time;
            processes[idx].waiting_time = processes[idx].turnaround_time - processes[idx].burst_time;
            current_time = processes[idx].finish_time;
            visited[idx] = 1;
            completed++;
        } else {
            current_time++;
        }
    }
}

void priority(Process processes[], int n) {
    sort_by_arrival(processes, n);
    int current_time = 0;
    int completed = 0;
    int visited[n];
    for (int i = 0; i < n; i++) visited[i] = 0;

    while (completed != n) {
        int idx = -1;
        int max_pr = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && !visited[i]) {
                if (processes[i].priority > max_pr) {
                    max_pr = processes[i].priority;
                    idx = i;
                }
            }
        }
        if (idx != -1) {
            processes[idx].start_time = current_time;
            processes[idx].finish_time = current_time + processes[idx].burst_time;
            processes[idx].turnaround_time = processes[idx].finish_time - processes[idx].arrival_time;
            processes[idx].waiting_time = processes[idx].turnaround_time - processes[idx].burst_time;
            current_time = processes[idx].finish_time;
            visited[idx] = 1;
            completed++;
        } else {
            current_time++;
        }
    }
}

void rr(Process processes[], int n, int quantum) {
    int remaining_bt[n];
    for (int i = 0; i < n; i++) remaining_bt[i] = processes[i].burst_time;

    int current_time = 0;
    int completed = 0;
    while (completed != n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && remaining_bt[i] > 0) {
                if (remaining_bt[i] > quantum) {
                    current_time += quantum;
                    remaining_bt[i] -= quantum;
                } else {
                    current_time += remaining_bt[i];
                    processes[i].finish_time = current_time;
                    processes[i].turnaround_time = processes[i].finish_time - processes[i].arrival_time;
                    processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
                    remaining_bt[i] = 0;
                    completed++;
                }
            }
        }
    }
}

void print_table(Process processes[], int n) {
    printf("\nPID\tArrival\tBurst\tPriority\tStart\tFinish\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\t%d\t\t%d\n",
            processes[i].pid, processes[i].arrival_time, processes[i].burst_time, processes[i].priority,
            processes[i].start_time, processes[i].finish_time,
            processes[i].turnaround_time, processes[i].waiting_time);
    }
}

int main() {
    int n, quantum, choice;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time, burst time, and priority for process %d: ", i+1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].pid = i + 1;
    }

    printf("\nEnter the time quantum for Round Robin: ");
    scanf("%d", &quantum);

    while (1) {
        printf("\nSelect the scheduling algorithm:\n");
        printf("1. FCFS\n");
        printf("2. SJF\n");
        printf("3. Priority\n");
        printf("4. Round Robin\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                fcfs(processes, n);
                print_table(processes, n);
                break;
            case 2:
                sjf(processes, n);
                print_table(processes, n);
                break;
            case 3:
                priority(processes, n);
                print_table(processes, n);
                break;
            case 4:
                rr(processes, n, quantum);
                print_table(processes, n);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice, please try again.\n");
        }
    }

    return 0;
}


